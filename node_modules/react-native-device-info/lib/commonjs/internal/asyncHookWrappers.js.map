{"version":3,"sources":["asyncHookWrappers.ts"],"names":["useOnMount","asyncGetter","initialResult","loading","result","response","setResponse","getAsync"],"mappings":"qVAAA,4BASO,QAASA,CAAAA,UAAT,CAAuBC,WAAvB,CAAsDC,aAAtD,CAA4F,eACjE,oBAA6B,CAC3DC,OAAO,CAAE,IADkD,CAE3DC,MAAM,CAAEF,aAFmD,CAA7B,CADiE,qDAC1FG,QAD0F,eAChFC,WADgF,eAMjG,qBAAU,UAAM,CAEd,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,mLACMN,WAAW,EADjB,SACTG,MADS,eAEfE,WAAW,CAAC,CAAEH,OAAO,CAAE,KAAX,CAAkBC,MAAM,CAANA,MAAlB,CAAD,CAAX,CAFe,8CAAjB,CAKAG,QAAQ,GACT,CARD,CAQG,CAACN,WAAD,CARH,EAUA,MAAOI,CAAAA,QAAP,CACD","sourcesContent":["import { useState, useEffect } from 'react';\n\nimport { AsyncHookResult } from './types';\n\n/**\n * simple hook wrapper for async functions for 'on-mount / componentDidMount' that only need to fired once\n * @param asyncGetter async function that 'gets' something\n * @param initialResult -1 | false | 'unknown'\n */\nexport function useOnMount<T>(asyncGetter: () => Promise<T>, initialResult: T): AsyncHookResult<T> {\n  const [response, setResponse] = useState<AsyncHookResult<T>>({\n    loading: true,\n    result: initialResult,\n  });\n\n  useEffect(() => {\n    // async function cuz react complains if useEffect's effect param is an async function\n    const getAsync = async () => {\n      const result = await asyncGetter();\n      setResponse({ loading: false, result });\n    };\n\n    getAsync();\n  }, [asyncGetter]);\n\n  return response;\n}\n"]}